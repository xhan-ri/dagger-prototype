// Code generated by dagger-compiler.  Do not edit.
package com.napster.mobile.android.daggerlogin.test;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class TestERemedyModule$$ModuleAdapter extends ModuleAdapter<TestERemedyModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { com.napster.mobile.android.daggerlogin.service.eremedy.ERemedyModule.class, };

  public TestERemedyModule$$ModuleAdapter() {
    super(com.napster.mobile.android.daggerlogin.test.TestERemedyModule.class, INJECTS, STATIC_INJECTIONS, true /*overrides*/, INCLUDES, true /*complete*/, false /*library*/);
  }

  @Override
  public TestERemedyModule newModule() {
    return new com.napster.mobile.android.daggerlogin.test.TestERemedyModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, TestERemedyModule module) {
    bindings.contributeProvidesBinding("com.napster.mobile.android.daggerlogin.service.eremedy.IERemedy", new ProvideERemedyProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.napster.mobile.android.daggerlogin.service.eremedy.IERemedy>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.napster.mobile.android.daggerlogin.service.eremedy.IERemedy>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideERemedyProvidesAdapter extends ProvidesBinding<com.napster.mobile.android.daggerlogin.service.eremedy.IERemedy>
      implements Provider<com.napster.mobile.android.daggerlogin.service.eremedy.IERemedy> {
    private final TestERemedyModule module;

    public ProvideERemedyProvidesAdapter(TestERemedyModule module) {
      super("com.napster.mobile.android.daggerlogin.service.eremedy.IERemedy", IS_SINGLETON, "com.napster.mobile.android.daggerlogin.test.TestERemedyModule", "provideERemedy");
      this.module = module;
      setLibrary(false);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.napster.mobile.android.daggerlogin.service.eremedy.IERemedy>}.
     */
    @Override
    public com.napster.mobile.android.daggerlogin.service.eremedy.IERemedy get() {
      return module.provideERemedy();
    }
  }
}
